# ============================================================
# SE363 ‚Äì Ph√°t tri·ªÉn ·ª©ng d·ª•ng tr√™n n·ªÅn t·∫£ng d·ªØ li·ªáu l·ªõn
# Khoa C√¥ng ngh·ªá Ph·∫ßn m·ªÅm ‚Äì Tr∆∞·ªùng ƒê·∫°i h·ªçc C√¥ng ngh·ªá Th√¥ng tin, ƒêHQG-HCM
# HopDT ‚Äì Faculty of Software Engineering, University of Information Technology (FSE-UIT)
#
# streamlit_app.py
# ============================================================
# Real-time Dashboard hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ph∆∞∆°ng ti·ªán (Vehicle Counting)
# t·ª´ pipeline Kafka ‚Üí Spark ‚Üí PostgreSQL, t·ª± ƒë·ªông c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c.
# ============================================================

import streamlit as st
import pandas as pd
from sqlalchemy import create_engine
from streamlit_autorefresh import st_autorefresh
import plotly.express as px
import time

# ============================================================
# ‚öôÔ∏è C·∫•u h√¨nh k·∫øt n·ªëi PostgreSQL
# ============================================================
DB_CONFIG = {
    "user": "airflow",
    "password": "airflow",
    "host": "postgres",  # Docker service name
    "port": 5432,
    #"database": "vehicle_db",
    "database": "airflow",
}

# ============================================================
# üîÑ H√†m load d·ªØ li·ªáu an to√†n t·ª´ PostgreSQL
# ============================================================
@st.cache_data(ttl=5)
def load_data():
    engine = create_engine(
        f"postgresql+psycopg2://{DB_CONFIG['user']}:{DB_CONFIG['password']}@"
        f"{DB_CONFIG['host']}:{DB_CONFIG['port']}/{DB_CONFIG['database']}"
    )
    try:
        conn = engine.raw_connection()
        try:
            df = pd.read_sql(
                """
                SELECT * FROM vehicle_counts
                ORDER BY processed_at DESC
                LIMIT 200
                """,
                conn
            )
        finally:
            conn.close()
        return df
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi PostgreSQL: {e}")
        return pd.DataFrame()

# ============================================================
# üß≠ Giao di·ªán ch√≠nh
# ============================================================
st.set_page_config(page_title="UIT Project : Vehicle Streaming", layout="wide")
st.title("üöó UIT Project : Real-time Vehicle Counting")
st.caption("Minh ho·∫° pipeline Kafka ‚Üí Spark ‚Üí PostgreSQL ‚Üí Streamlit (CNPM ‚Äì UIT)")

# ============================================================
# üîÅ Auto-refresh m·ªói 5 gi√¢y
# ============================================================
st_autorefresh(interval=5 * 1000, limit=None, key="auto_refresh")

# ============================================================
# üìä Hi·ªÉn th·ªã d·ªØ li·ªáu
# ============================================================
df = load_data()

if df.empty:
    st.warning("‚è≥ Ch∆∞a c√≥ d·ªØ li·ªáu trong b·∫£ng `vehicle_counts`. H√£y ƒë·∫£m b·∫£o producer v√† consumer ƒëang ch·∫°y.")
else:
    # Hi·ªÉn th·ªã d·ªØ li·ªáu th√¥
    st.subheader("üìù D·ªØ li·ªáu g·∫ßn ƒë√¢y")
    st.dataframe(df.head(10), use_container_width=True)

    # Bi·ªÉu ƒë·ªì th·ªëng k√™ t·ªïng h·ª£p
    st.subheader("üìà Th·ªëng k√™ theo lo·∫°i ph∆∞∆°ng ti·ªán v√† camera")

    col1, col2 = st.columns(2)

    # =============================
    # 1Ô∏è‚É£ Bi·ªÉu ƒë·ªì c·ªôt - t·ªïng xe theo lo·∫°i & camera
    # =============================
    with col1:
        df_grouped = (
            df.groupby(["camera_id", "vehicle_type"])["count"]
            .sum()
            .reset_index()
        )
        fig_bar = px.bar(
            df_grouped,
            x="camera_id",
            y="count",
            color="vehicle_type",
            text_auto=True,
            barmode="group",
            title="S·ªë l∆∞·ª£ng ph∆∞∆°ng ti·ªán theo Camera & Lo·∫°i xe"
        )
        st.plotly_chart(fig_bar, use_container_width=True)

    # =============================
    # 2Ô∏è‚É£ Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng - xu h∆∞·ªõng ƒë·∫øm xe theo th·ªùi gian
    # =============================
    with col2:
        df_line = (
            df.groupby(["frame_time", "vehicle_type"])["count"]
            .sum()
            .reset_index()
        )
        fig_line = px.line(
            df_line,
            x="frame_time",
            y="count",
            color="vehicle_type",
            markers=True,
            title="Xu h∆∞·ªõng ƒë·∫øm xe theo th·ªùi gian (1 ph√∫t/l·∫ßn)"
        )
        st.plotly_chart(fig_line, use_container_width=True)

    # =============================
    # 3Ô∏è‚É£ T·ªïng h·ª£p nhanh
    # =============================
    st.subheader("üìä T·ªïng h·ª£p nhanh")
    total_all = int(df["count"].sum())
    total_cam = df["camera_id"].nunique()
    total_types = df["vehicle_type"].nunique()

    col3, col4, col5 = st.columns(3)
    col3.metric("T·ªïng s·ªë xe ƒë√£ ƒë·∫øm", f"{total_all:,}")
    col4.metric("S·ªë camera ƒëang ho·∫°t ƒë·ªông", total_cam)
    col5.metric("S·ªë lo·∫°i ph∆∞∆°ng ti·ªán", total_types)
