"""
==================================================
Vehicle Kafka Producer
--------------------------------------------------
- ƒê·ªçc 2 video offline t·ª´ th∆∞ m·ª•c `data/`
- Chuy·ªÉn t·ª´ng khung h√¨nh (frame) sang base64 JSON
- G·ª≠i d·ªØ li·ªáu li√™n t·ª•c v√†o Kafka topic "vehicle-stream"
==================================================
"""

import cv2
import base64
import json
import time
from kafka import KafkaProducer
import os

KAFKA_BROKER = "kafka:9092"
TOPIC = "vehicle-stream"
DATA_DIR = "/opt/airflow/projects/vehicle_count/data"
FPS_LIMIT = 5  # s·ªë frame/s g·ª≠i v√†o Kafka (gi·∫£m t·∫£i h·ªá th·ªëng)

def encode_frame(frame):
    """Chuy·ªÉn frame OpenCV sang chu·ªói base64 ƒë·ªÉ g·ª≠i qua Kafka."""
    _, buffer = cv2.imencode(".jpg", frame)
    return base64.b64encode(buffer).decode("utf-8")

def stream_video(video_path, producer, camera_id):
    """ƒê·ªçc video v√† g·ª≠i t·ª´ng frame v√†o Kafka."""
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print(f"[Producer] ‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü video: {video_path}")
        return

    fps_interval = 1 / FPS_LIMIT
    print(f"[Producer] üé• Streaming from {os.path.basename(video_path)} (camera_id={camera_id})")

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            print(f"[Producer] ‚úÖ Video {os.path.basename(video_path)} k·∫øt th√∫c.")
            break

        # M√£ h√≥a frame
        frame_b64 = encode_frame(frame)

        # G·ª≠i message
        message = {
            "camera_id": camera_id,
            "timestamp": time.time(),
            "frame_data": frame_b64
        }
        producer.send(TOPIC, value=message)

        # Gi·ªõi h·∫°n FPS
        time.sleep(fps_interval)

    cap.release()

def main():
    print("[Producer] üîå Connecting to Kafka...")
    producer = KafkaProducer(
        bootstrap_servers=KAFKA_BROKER,
        value_serializer=lambda v: json.dumps(v).encode("utf-8")
    )

    videos = [
        os.path.join(DATA_DIR, "video1.mp4"),
        os.path.join(DATA_DIR, "video2.mp4")
    ]

    for idx, video_path in enumerate(videos, start=1):
        stream_video(video_path, producer, camera_id=f"CAM_{idx}")

    producer.flush()
    print("[Producer] üèÅ All videos processed and sent successfully.")

if __name__ == "__main__":
    main()
